Crie um projeto moderno, elegante e de nível sênior em React 18 com TypeScript, que atenda ao desafio técnico descrito abaixo.

🎯 Objetivo
Criar uma SPA (Single Page Application) de um marketplace de trocas de cartas colecionáveis, com autenticação, gerenciamento de cartas, sistema de trocas, e listagem pública — sem back-end, consumindo apenas a API pública fornecida.

⚙️ Tecnologias Obrigatórias
Use as melhores tecnologias modernas disponíveis:

React 18+

TypeScript (strict mode)

React Router DOM v6+ – navegação SPA

Zustand – gerenciamento de estado global por domínio

React Hook Form + Zod – validações robustas de formulários

Axios – requisições HTTP com interceptor JWT

TailwindCSS – design moderno, responsivo e elegante

Framer Motion – animações visuais de alto nível

React Icons ou Lucide – ícones leves e premium

React Hot Toast / Sonner – notificações modernas

React Query – cache, refetch e estado de dados remoto

Vite – bundler para performance absurda

Husky + Lint-staged + ESLint + Prettier – qualidade e consistência

🧱 Estrutura de Diretórios Esperada
Organize o código com arquitetura modular limpa, separada por domínio:

bash
Copiar
Editar
src/
├── api/               # Configuração Axios e serviços REST
├── assets/            # Imagens, ícones customizados
├── components/        # Componentes compartilháveis (Card, Button, Modal, etc.)
├── features/          # Domínios: auth/, cards/, trades/
│   ├── auth/
│   ├── cards/
│   └── trades/
├── hooks/             # Custom hooks (useAuth, useCards, etc.)
├── pages/             # Páginas (Login, Register, Dashboard, Home)
├── router/            # Rotas públicas/privadas
├── store/             # Zustand stores por domínio
├── styles/            # Tailwind config, tokens, temas
├── types/             # Modelos e interfaces globais
└── utils/             # Funções auxiliares, helpers
🔐 Funcionalidades Completas
Implemente as seguintes funcionalidades com foco em UX fluída, código limpo e alto nível visual:

1. Autenticação JWT
Registro (POST /register)

Login (POST /login)

Logout

Armazenar token no localStorage

Axios interceptor para Authorization

Zustand store global de auth

Redirecionamento automático

Guardas de rota (rota privada)

2. Cartas
Listar cartas do sistema (GET /cards)

Listar cartas do usuário (GET /me/cards)

Adicionar cartas ao usuário (POST /me/cards)

Paginação (rpp, page)

Exibição visual com:

Imagem

Nome

Descrição

Data de criação (formatada)

3. Trocas
Criar troca (POST /trades) com:

Cartas ofertadas do usuário (type: "OFFERING")

Cartas desejadas do sistema (type: "RECEIVING")

Listar trocas abertas (GET /trades)

Exibir criador da troca e as cartas envolvidas

Deletar troca (DELETE /trades/:id) criada pelo usuário

4. Marketplace público (home)
Página pública com todas as trocas abertas

Paginação funcional

Botões de “Ver detalhes” e “Voltar”

Visual com grid de cards animados

✨ Design Premium e UI Animada
Implemente um layout moderno com:

Tailwind + Radix UI ou Headless UI

Botões modernos com transições suaves

Modais com animações de entrada e saída (Framer Motion)

Transições de tela fluidas entre rotas

Animações de scroll usando Framer Motion ou IntersectionObserver

Ícones premium usando Lucide ou React Icons

Skeletons em loading (ex: react-loading-skeleton)

Dark mode toggle (opcional, mas desejável)

🧠 UX & Responsividade
Totalmente responsivo (mobile/tablet/desktop)

Feedback visual em todas ações (cliques, carregamento, erros, sucesso)

Toasts modernos e informativos

Interface clara, intuitiva e bonita

Animações suaves e refinadas nos elementos interativos

📄 README Esperado
Inclua no README:

Visão geral do projeto

Stack completa usada

Como rodar localmente

Como fazer build e deploy

Como funcionam as principais decisões arquiteturais

Pontos incompletos ou decisões técnicas relevantes

🔗 API REST (fornecida)
Base URL: https://cards-marketplace-api-2fjj.onrender.com

Rotas disponíveis (todas devem ser usadas):

POST /register

POST /login

GET /me

GET /cards

GET /cards/:id

POST /me/cards

POST /trades

GET /trades

DELETE /trades/:id

Atenção: a API hiberna após inatividade. Sempre trate loading, retry e fallback.

🚀 Deploy (Obrigatório)
Use Vercel ou Netlify

Configure corretamente .env com:

env
Copiar
Editar
VITE_API_BASE_URL=https://cards-marketplace-api-2fjj.onrender.com
Deploy com domínio customizado (se possível)

Link de produção no README

✅ Qualidade Esperada (nível sênior)
Critério	Avaliação
Arquitetura	Modular, escalável, separação por domínio
Componentização	Reutilização e composição clara
UX/UI	Bonita, responsiva, com animações suaves
Código	Limpo, tipado, legível, sem code smells
Validação	Forte nos formulários com Zod + RHF
Feedback visual	Loading, erro, sucesso, vazio
Commits	Estruturados com Conventional Commits (feat:, fix:, refactor:)
Deploy	Em produção, funcional e estável

🧪 Extras diferenciais (se possível)
Testes com Vitest + React Testing Library

Dark Mode switcher

Config global de tema (tokens de cor)

Lazy loading de imagens e páginas

SEO básico (meta tags, titles dinâmicos)

❌ Back-End
Não implemente nenhum back-end. Apenas o front-end, consumindo a API pública descrita acima.

🧨 Conclusão
Esse projeto deve ser nível sênior real, com foco em arquitetura limpa, animações refinadas, UX impecável e visual moderno.

Você deve mostrar domínio de:

React avançado

Arquitetura front-end desacoplada

Experiência de usuário diferenciada

Requisições seguras e escaláveis

Animações com Framer Motion

Componente reutilizável e design system

